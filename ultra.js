var UltraRenderer = (function() {
  var UltraRenderer = function() {
    
  };

  UltraRenderer.prototype = new (function() {
    // Basic RegEx for URIs
    var URI_REGEX = '(http|ftp|https)://[\\w-]+(\\.[\\w-]+)+([\\w-.,@?^=%&:/~+#-]*[\\w@?^=%&;/~+#-])?';


    // # Configuration

    // Indicates if a colon should be appended to every node element.
    this.addColon               = false;

    // Specifies the characters which should be appended to node elements
    // if `this.addColon` is set to `true`.
    this.colon                  = ': ';

    // Prefixes for node elements. Default: none.
    this.nodePfx                = '';
    // Suffixes for node elements. Default: none.
    this.nodeSfx                = '';

    // Indicates if elements which are inside arrays should have special
    // markup. Default: HTML lists.
    this.noArrayMarkup          = false;

    // Prefixes for array elements.
    this.arrayElementPfx        = '<ul><li>';
    // Suffixes for array elements.
    this.arrayElementSfx        = '</li></ul>';

    // Replacement for `null` elements.
    this.nullReplacement        = 'NIL';

    // Prefixes for leaf elements.
    this.leafPfx                = '';
    // Suffixes for leaf elements.
    this.leafSfx                = '';

    // Prefixes for node `String` elements. Default: none.
    this.nodeStringPfx          = '';
    // Suffixes for node `String` elements. Default: none.
    this.nodeStringSfx          = '';

    // Prefixes for node `Number` elements. Default: none.
    this.nodeNumberPfx          = '';
    // Suffixes for node `Number` elements. Default: none.
    this.nodeNumberSfx          = '';

    // Prefixes for node `Boolean` elements. Default: none.
    this.nodeBooleanPfx         = '';
    // Suffixes for node `Boolean` elements. Default: none.
    this.nodeBooleanSfx         = '';

    this.useTableTags           = false;


    // # Constants

    // ## Table tags
    //
    // Using table tags is semantically bogus, but may be prioritized in
    // certain situations.
    this.tableTags = {
      open: {
        table: '<table>'
        , tr: '<tr>'
        , td: '<td>'
      }
      , close: {
        table: '</table>'
        , tr: '</tr>'
        , td: '</td>'
      }
    }

    // ## Div tags (used by default)
    this.tag = {
      open: {
        // `table` class mimics tables.
        table: '<div class="table">'
        // `table-row` class mimics table rows.
        , tr: '<div class="table-row">'
        // `table-cell` class mimics table cells.
        , td: '<div class="table-cell">'
      }
      , close: {
        table: '</div>'
        , tr: '</div>'
        , td: '</div>'
      }
    }
    
    // ## CSS rules
    // 
    // CSS rules are used for all `<div>` elements.
    //
    // * `table`
    // * `table-row`
    // * `table-cell`
    this.cssRules = '\n\n<style type="text/css">\n \
.table {\ \
  display: table;\n \
  width: 100%;\n \
  border-spacing: 5px;\n \
}\n \
 \
.table-row {\n \
  display: table-row;\n \
}\n \
\n \
.table-cell {\n \
  border: 1px solid #aeaeae;\n \
  display: table-cell;\n \
}\n \
</style>\n\n';


    // # Methods

    // ## UltraRenderer.href
    //
    // Checks if the if a string is an url. If it is: wrap it in a `a` tag.
    // If not: do nothing.
    //
    // > `url`: *String* String which should be checked.
    //
    // Returns a *String*.
    //
    // **********
    this.href = function(uri) {
      var description = uri;
      // Add colons for node elements, if `this.addColon` is `true`.
      if (this.addColon) {
        description += this.colon;
      }
      return '<a href=\"' + uri + '\">' + description + '</a>';
    };

    // ## UltraRenderer.linkify
    //
    // Makes a link out of a potential URL and returns it.
    // 
    // > `url` - String Any string.
    // 
    // > `arrayElementMarkup` - Boolean Indicates if the URL should be marked
    //     up as Arraa element
    //
    // Returns a *String*.
    //
    // **********
    this.linkify = function(url, arrayElementsMarkup) {
      var arrayElementsMarkup = arrayElementsMarkup || false;
      if (url.match(URI_REGEX)) {
        return this.href(url);
      } else {
        if (this.addColon && url !== this.nullReplacement) {
          url += this.colon;
        }
        if (arrayElementsMarkup) {
          url = this.arrayElementPfx + url + this.arrayElementSfx;
        }

        return url;
      }
    }

    // ## UltraRenderer.render
    //
    // This renders any valid JSON input and generates HTML output.
    // 
    // > `json` *Object* - Any object generated by parsing valid JSON data.
    //
    // > `parentIsArray` *Boolean* - Indicates if the parent object of the
    //     object that is currently rendered is an Array.
    //
    // > `isNotRoot` *Boolean* -  Indicates if the object currently
    //     rendered is not the root object.
    //
    // Returns a *String*.
    // 
    // **********
    this.render = function(json, parentIsArray, isNotRoot) {
      var s = '';
      // Use HTML tag elements instead of default divs.
      if (this.useTableTags) {
        this.tag = this.tableTags;
      }
      var self = this;
      var isNotRoot = isNotRoot || false;
      var parentIsArray = parentIsArray || false;

      // Special situation: No special markup for array elements.
      if (this.noArrayMarkup) {
        isNotRoot = true;
        parentIsArray = false;
      }
      // Special situation: the root element is of type Array.
      // So just pretend it has a parent which is of type Array.
      // This might cause trouble if parentIsArray is taken literally.
      if (!isNotRoot) {

        if (!this.useTableTags) {
          s = this.cssRules + s;
        }

        if (json.constructor === Array) {
          parentIsArray = true;
        }
      }
      var properties = Object.getOwnPropertyNames(json);
      // Arrays have a special `length` element which is, by default, the
      // last element. This is not needed, so remove it.
      if (json.constructor === Array) {
        properties.pop();
      }
      s += this.tag.open.table;
      for (var i in properties) {

        var currentProperty = properties[i];
        var currentEntity = json[properties[i]];

        s += this.tag.open.tr;
        if (typeof currentEntity == 'object' && currentEntity !== null &&
            currentEntity !== undefined) {
          s += this.tag.open.td;
          s += this.nodePfx + this.linkify(encodeURI(currentProperty), parentIsArray) + this.nodeSfx;
          s += this.tag.close.td;

          s += this.tag.open.td;
          s += this.render(
            currentEntity, currentEntity.constructor === Array, true);
          s += this.tag.close.td;
        } else if (currentEntity !== null && currentEntity !== undefined) {
          s += this.tag.open.td;
          s += this.nodePfx + this.linkify(encodeURI(currentProperty), parentIsArray) + this.nodeSfx;
          s += this.tag.close.td;

          s += this.tag.open.td;
          if (typeof currentEntity === 'string') {
            // Do not use colons for 'leaf entities'.
            var oldBool = this.addColon;
            this.addColon = false;
            s += this.leafPfx + this.nodeStringPfx +
              this.linkify(currentEntity, false) + this.nodeStringSfx +
              this.leafSfx;  // No special array markup
              // All other entities should have colons, though
              this.addColon = oldBool;
          } else if (typeof currentEntity === 'number'){
            s += this.leafPfx + this.nodeNumberPfx + currentEntity +
              this.nodeNumberSfx + this.leafSfx;
          } else if (typeof currentEntity === 'boolean'){
            s += this.leafPfx + this.nodeBooleanPfx + currentEntity +
              this.nodeBooleanSfx + this.leafSfx;
          }
          s += this.tag.close.td;
        } else if (typeof currentEntity === 'boolean'){
          s += this.tag.open.td;
          s += this.linkify(encodeURI(currentProperty), parentIsArray);
          s += this.tag.close.td;

          s += this.tag.open.td;
          // Do not use colons for 'leaf entities'.
          var oldBool = this.addColon;
          s += this.leafPfx + this.nodeBooleanPfx + currentEntity +
            this.nodeBooleanSfx + this.leafSfx;
          this.addColon = oldBool;
        } else if (currentEntity === null){
          s += this.tag.open.td;
          s += this.linkify(encodeURI(currentProperty), parentIsArray);
          s += this.tag.close.td;

          s += this.tag.open.td;
          // Do not use colons for 'leaf entities'.
          var oldBool = this.addColon;
          s += this.nullReplacement;
          // All other entities should have colons, though.
          this.addColon = oldBool;
          s += this.tag.close.td;

        }

        s += this.tag.close.tr;
      }

      s += this.tag.close.table;
      return s;
    };

  });

  return UltraRenderer;
}).call(this);
